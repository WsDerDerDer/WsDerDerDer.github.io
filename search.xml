<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序</title>
      <link href="/2020/06/03/kuai-su-pai-xu/"/>
      <url>/2020/06/03/kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>设有数组S</p><ol><li>如果数组元素是0或者1则返回</li><li>取S中任意元素v为pivot</li><li>将S-{v}分为两个不相交的集合</li><li>返回quickSort(S1),继而v,继而quickSort(S2)</li></ol><p><strong>选取枢纽元:</strong></p><ol><li>如果固定的选取第一个为pivot,当S为逆序时,分割就毫无意义.</li><li>随机的选取枢纽元则会因随机数生成影响总体运行效率.</li><li>三数中值分割法:使用左端,右端和中心位置三值的中值作为枢纽元.</li></ol><h3 id="代码-c"><a href="#代码-c" class="headerlink" title="代码(c#)"></a>代码(c#)</h3><pre><code>using System;namespace 快速排序{    class Program    {        static void Main(string[] args)        {            DateTime t1 = DateTime.Now;            Random rd = new Random();            int[] nums = new int[100];            for (int i = 0; i &lt; nums.Length; i++)            {                nums[i] = rd.Next(0, 10000);            }            QuickSort(nums, 0, nums.Length - 1);            Console.ReadKey();        }        public static void QuickSort(int[] arr, int startIndex, int endIndex)        {            int left = startIndex;            int right = endIndex - 1;            if ((left + 3) &lt;= right)            {                int pivot = Median(arr, startIndex, endIndex);                while (true)                {                    while (arr[++left] &lt; arr[pivot]) { }                    while (arr[--right] &gt; arr[pivot]) { }                    if (left &lt; right) { Swap(arr, left, right); }                    else break;                }                //交换pivot与left指针的值,此时left在right右边,大于pivot                Swap(arr, left, pivot);                //根据pivot分为两部分继续排序                QuickSort(arr, startIndex, left - 1);                QuickSort(arr, left + 1, endIndex);            }            else            {                //当需要排序的数值过少使用插入排序                InsertSort(arr, startIndex, endIndex + 1);            }        }        /// &lt;summary&gt;        /// 插入排序        /// &lt;/summary&gt;        /// &lt;param name="arr"&gt;&lt;/param&gt;        /// &lt;param name="n"&gt;&lt;/param&gt;        public static void InsertSort(int[] arr, int s, int n)        {            int temp, i, j;            for (i = s; i &lt; n; i++)            {                temp = arr[i];                for (j = i; j &gt; 0 &amp;&amp; arr[j - 1] &gt; temp; j--)                {                    arr[j] = arr[j - 1];                }                arr[j] = temp;            }        }        /// &lt;summary&gt;        /// 三数中值分割法:        /// &lt;/summary&gt;        /// &lt;param name="arr"&gt;&lt;/param&gt;        /// &lt;param name="left"&gt;&lt;/param&gt;        /// &lt;param name="right"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public static int Median(int[] arr, int left, int right)        {            int center = (left + right) / 2;            if (arr[left] &gt; arr[center])            {                Swap(arr, left, center);            }            if (arr[right] &lt; arr[left])            {                Swap(arr, right, center);            }            if (arr[center] &lt; arr[right])            {                Swap(arr, center, right);            }            Swap(arr, center, right - 1);            return right - 1;            //三值中,left为最小,right为最大,将枢纽元放到arr[right-1],在初始化阶段            //左右指针分别为left+1,right-2        }        /// &lt;summary&gt;        /// 交换数组中两个的位置        /// &lt;/summary&gt;        /// &lt;param name="arr"&gt;&lt;/param&gt;        /// &lt;param name="a"&gt;&lt;/param&gt;        /// &lt;param name="b"&gt;&lt;/param&gt;        public static void Swap(int[] arr, int a, int b)        {            int temp = arr[a];            arr[a] = arr[b];            arr[b] = temp;        }    }}</code></pre><p><img src="https://ww1.yunjiexi.club/2020/06/08/uboOw.png" alt="运行结果"></p><p>用上方的插入排序和快速排序进行比较,当数据个数在百万时,插入排序要等待很久才能完成排序,</p><p>而快速排序在千万个数据时也能在很快时间内完成排序.</p><p><img src="https://ww1.yunjiexi.club/2020/06/08/ubkmP.png" alt=""></p><p>快速排序的时间复杂度平均为 o(NlogN) 最坏情况为o(N^2)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2020/06/02/zhong-jie-zhe-mo-shi/"/>
      <url>/2020/06/02/zhong-jie-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之中介者模式"><a href="#设计模式之中介者模式" class="headerlink" title="设计模式之中介者模式"></a>设计模式之中介者模式</h2><p><em>介绍:用一个中介对象封装一系列的对象交互.中介者使各对象不必显示的相互引用,从而使其耦合松散<br>而且可以独立地改变他们的交互</em></p><p><strong>优点：<br>1.降低了类的复杂度，将一对多转化成了一对一。<br>2.各个类之间的解耦。<br>3.符合迪米特原则。</strong></p><p><strong>缺点：中介者会庞大，变得复杂难以维护</strong></p><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ol><li>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 </li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>假如爸爸和妈妈发生了矛盾,两个人互不交流,此时儿子充当两个人消息传递者,儿子为中介者,爸爸妈妈为<br>需要互相通信的两个对象</p><p><strong>代码实现(C#)</strong></p><pre><code>using System;using System.Collections.Generic;namespace 中介者模式{    class Program    {        static void Main(string[] args)        {            //中介者:儿子            MediatorPeople Son = new MediatorPeople("胡图图");            Dad dad = new Dad(Son, "胡英俊");            Mom mom = new Mom(Son, "张小丽");            Son.AddPeople(dad);            Son.AddPeople(mom);            dad.Saying(mom, "不要生气了");            mom.Saying(dad, "好的");            Console.Read();        }    }    /// &lt;summary&gt;    /// 抽象服务对象基类    /// &lt;/summary&gt;    abstract class People    {        protected string Name;        //中介者对象        private MediatorPeople m_mediator;        public People(MediatorPeople mediator, string Name)        {            m_mediator = mediator;            this.Name = Name;        }        /// &lt;summary&gt;        /// 对指定对象发送消息        /// &lt;/summary&gt;        /// &lt;param name="hear"&gt;&lt;/param&gt;        /// &lt;param name="message"&gt;&lt;/param&gt;        public void Saying(People hear, string message)        {            m_mediator.Saying(this, hear, message);        }        //收到        public void Get(string message)        {            Console.WriteLine(Name + "收到消息:" + message);        }    }    class Mom : People    {        public Mom(MediatorPeople mediator, string Name) : base(mediator, Name) { }    }    class Dad : People    {        public Dad(MediatorPeople mediator, string Name) : base(mediator, Name) { }    }    /// &lt;summary&gt;    /// 中介者    /// &lt;/summary&gt;    class MediatorPeople    {        //所有要服务的人        protected List&lt;People&gt; m_peoples;        //中介者名称        private string Name;        public MediatorPeople(string name)        {            this.Name = name;            m_peoples = new List&lt;People&gt;();        }        //增加需要服务的对象        public void AddPeople(People people)        {            m_peoples.Add(people);        }        //向指定的人对话        public void Saying(People peopleSay, People PeopleHear, string Message)        {            if (!m_peoples.Contains(peopleSay))            {                Console.WriteLine(Name + "不能为你服务");                return;            }            Console.WriteLine(Name+"为你服务");            for (int i = 0; i &lt; m_peoples.Count; i++)            {                if (m_peoples[i] == PeopleHear)                {                    m_peoples[i].Get(Message);                    return;                }            }            Console.WriteLine("我不认识这个人");        }    }}</code></pre><p><img src="https://ftp.bmp.ovh/imgs/2020/06/79d49f803a351e89.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ugui实现简单摇杆</title>
      <link href="/2020/05/31/ugui-shi-xian-jian-dan-yao-gan/"/>
      <url>/2020/05/31/ugui-shi-xian-jian-dan-yao-gan/</url>
      
        <content type="html"><![CDATA[<h2 id="Unity-Ugui实现简单摇杆"><a href="#Unity-Ugui实现简单摇杆" class="headerlink" title="Unity Ugui实现简单摇杆"></a>Unity Ugui实现简单摇杆</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>利用Unity的ScrollRect组件</li></ul><ol><li>在Canvas上创建如此结构的空物体,在Restrict上添加Image组件作为背景图片,</li></ol><p>在Handel上添加Image组件,为摇杆的图标.</p><p><img src="http://i2.tiimg.com/720150/ad1476373d27778e.png" alt=""></p><ol start="2"><li>创建C#脚本Joystic,并拖到Joystic上,编辑脚本,代码如下</li></ol><pre><code>using System.Collections;using UnityEngine;using UnityEngine.EventSystems;using UnityEngine.UI;//继承ScrollRect组件,重写其OnDrag实现摇杆功能public class Joystic : ScrollRect{    private float radius;                    //区域半径    private Vector2 Outvalue;    protected override void Start()          //以Vector2为输出值    {         //sizeDelta:文档意思为 矩阵变换的大小相对于锚点之间的距离         //就是RectTransform上的Width和Height 两者的大小在此要设为相同值        radius = (transform as RectTransform).sizeDelta.x * 0.5f;           StartCoroutine(Handel());    }    public override void OnDrag(PointerEventData eventData)    {        base.OnDrag(eventData);        //content的锚点位置        Vector2 pos = content.anchoredPosition;        //当摇杆位置超出半径需要限制        if (pos.magnitude &gt; radius)        {            //归一化pos并乘以半径为最大值            Vector2 posEnd = pos.normalized * radius;            //设置锚点位置            SetContentAnchoredPosition(posEnd);        }    }    //我用的一个协程,也可以在update中执行    IEnumerator Handel()    {        while (true)        {            Outvalue.x = (content.anchoredPosition / radius).x;            Outvalue.y = (content.anchoredPosition / radius).y;            yield return new WaitForSeconds(0.02f);        }    }}</code></pre><ol start="3"><li>Tip:MoveMent Type要设为Elastic即弹性的</li></ol><ul><li>根据输出值来控制人物.</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2020/05/30/mou-pao-pai-xu/"/>
      <url>/2020/05/30/mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h4 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h4><ol><li>将第一个和第二个的记录的关键字进行比较,若为逆序r[1].key&gt;r[2].key,</li></ol><p>则交换;然后如此比较至n-1个和n个记录为止—第一趟冒泡排序,结果关键字</p><p>最大的记录被安置在最后一个记录上.</p><ol start="2"><li>对前n-1个记录进行第二趟冒泡排序,结果使关键字次大的记录在n-1的位</li></ol><p>置.</p><ol start="3"><li>重复过程,直到在一趟排序过程中没有交换过程.</li></ol><h4 id="代码-C"><a href="#代码-C" class="headerlink" title="代码(C#)"></a>代码(C#)</h4><pre><code>using System;class Program{    static void Main(string[] args)    {        Random rd = new Random();        SortT[] sortArray = new SortT[10];        //随机生成需要排序的对象        for (int i = 0; i &lt; sortArray.Length; i++)        {            SortT sort = new SortT() { key = rd.Next(0, 100) };            sortArray[i] = sort;            Console.WriteLine("随机值" + i + ":" + sort.key);        }        Bubble_sort(sortArray, sortArray.Length);        Console.WriteLine("\n");        for (int i = 0; i &lt; sortArray.Length; i++)        {            Console.WriteLine("排序值" + i + ":" + sortArray[i].key);        }        Console.ReadKey();    }    /// &lt;summary&gt;    /// 冒泡排序    /// &lt;/summary&gt;    static void Bubble_sort(SortT[] sort, int n)    {        int m = n, j, flag = 1; //flag :记录是否发生交换        SortT Temp;        while ((m &gt; 1) &amp;&amp; flag == 1)        {            flag = 0;            for (j = 0; j &lt; m - 1; j++)  //一次交换过程为将最大值放在最后            {                if (sort[j].key &gt; sort[j + 1].key)                {                    Temp = sort[j];                    sort[j] = sort[j + 1];                    sort[j + 1] = Temp;                    flag = 1;   //发生交换                }            }            m--;        }    }    public class SortT    {        public int key;    }}</code></pre><p><img src="http://i2.tiimg.com/720150/440c21d5d69ba56f.png" alt="结果"></p><ol start="4"><li>时间复杂度</li></ol><p>最好情况(正序):比较次数:n-1 移动次数:0 </p><p>最坏情况(逆序):比较次数1/2(n^2-n) 移动次数:3/2(n^2-n)</p><ol start="5"><li>空间复杂度</li></ol><p>S(n)=o(1)</p><ol start="6"><li>可从上次交换的位置继续进行排序提高效率</li></ol><pre><code>void Bubble_sort(SortT[] sort, int n){        int m = n, j;  //LastChange:下次排序位置        SortT Temp;        while (m &gt; 1)        {            int LastChange = 1;            for (j = 0; j &lt; m-1 ; j++)  //一次交换过程为将最大值放在最后            {                if (sort[j].key &gt; sort[j + 1].key)                {                    Temp = sort[j];                    sort[j] = sort[j + 1];                    sort[j + 1] = Temp;                    LastChange = j; //更新排序位置                }            }            m = LastChange;        }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
